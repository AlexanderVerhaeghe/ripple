from typing import Tuple

import jax.numpy as jnp
import jax

from ..constants import gt
from ..typing import Array

from .IMRPhenomD_QNMdata import QNMData_a, QNMData_fRD, QNMData_fdamp


def EradRational0815_s(eta, s):
    eta2 = eta * eta
    eta3 = eta2 * eta
    eta4 = eta3 * eta

    return (
        (
            0.055974469826360077 * eta
            + 0.5809510763115132 * eta2
            - 0.9606726679372312 * eta3
            + 3.352411249771192 * eta4
        )
        * (
            1.0
            + (
                -0.0030302335878845507
                - 2.0066110851351073 * eta
                + 7.7050567802399215 * eta2
            )
            * s
        )
    ) / (
        1.0
        + (-0.6714403054720589 - 1.4756929437702908 * eta + 7.304676214885011 * eta2)
        * s
    )


def EradRational0815(eta, chi1, chi2):
    Seta = jnp.sqrt(1.0 - 4.0 * eta)
    m1 = 0.5 * (1.0 + Seta)
    m2 = 0.5 * (1.0 - Seta)
    m1s = m1 * m1
    m2s = m2 * m2
    s = (m1s * chi1 + m2s * chi2) / (m1s + m2s)

    return EradRational0815_s(eta, s)


def FinalSpin0815_s(eta, S):
    eta2 = eta * eta
    eta3 = eta2 * eta
    S2 = S * S
    S3 = S2 * S
    return eta * (
        3.4641016151377544
        - 4.399247300629289 * eta
        + 9.397292189321194 * eta2
        - 13.180949901606242 * eta3
        + S
        * (
            (1.0 / eta - 0.0850917821418767 - 5.837029316602263 * eta)
            + (0.1014665242971878 - 2.0967746996832157 * eta) * S
            + (-1.3546806617824356 + 4.108962025369336 * eta) * S2
            + (-0.8676969352555539 + 2.064046835273906 * eta) * S3
        )
    )


def get_fRD_fdamp(m1, m2, chi1, chi2):
    m1_s = m1 * gt
    m2_s = m2 * gt
    M_s = m1_s + m2_s
    eta_s = m1_s * m2_s / (M_s**2.0)
    S = (chi1 * m1_s**2 + chi2 * m2_s**2) / (M_s**2.0)
    # eta2 = eta_s * eta_s
    # eta3 = eta2 * eta_s
    # S2 = S * S
    # S3 = S2 * S

    # a = eta_s * (
    #     3.4641016151377544
    #     - 4.399247300629289 * eta_s
    #     + 9.397292189321194 * eta2
    #     - 13.180949901606242 * eta3
    #     + S
    #     * (
    #         (1.0 / eta_s - 0.0850917821418767 - 5.837029316602263 * eta_s)
    #         + (0.1014665242971878 - 2.0967746996832157 * eta_s) * S
    #         + (-1.3546806617824356 + 4.108962025369336 * eta_s) * S2
    #         + (-0.8676969352555539 + 2.064046835273906 * eta_s) * S3
    #     )
    # )

    a = FinalSpin0815_s(eta_s, S)

    fRD = jnp.interp(a, QNMData_a, QNMData_fRD) / (
        1.0 - EradRational0815(eta_s, chi1, chi2)
    )
    fdamp = jnp.interp(a, QNMData_a, QNMData_fdamp) / (
        1.0 - EradRational0815(eta_s, chi1, chi2)
    )

    return fRD / M_s, fdamp / M_s


def get_transition_frequencies(
    theta: Array, gamma2: float, gamma3: float
) -> Tuple[float, float, float, float, float, float]:
    m1, m2, chi1, chi2 = theta
    M = m1 + m2
    f_RD, f_damp = get_fRD_fdamp(m1, m2, chi1, chi2)

    # Phase transition frequencies
    f1 = 0.018 / (M * gt)
    f2 = 0.5 * f_RD

    # Amplitude transition frequencies
    f3 = 0.014 / (M * gt)
    f4_gammaneg_gtr_1 = lambda f_RD_, f_damp_, gamma3_, gamma2_: jnp.abs(
        f_RD_ + (-f_damp_ * gamma3_) / gamma2_
    )
    f4_gammaneg_less_1 = lambda f_RD_, f_damp_, gamma3_, gamma2_: jnp.abs(
        f_RD_ + (f_damp_ * (-1 + jnp.sqrt(1 - (gamma2_) ** 2.0)) * gamma3_) / gamma2_
    )
    f4 = jax.lax.cond(
        gamma2 >= 1,
        f4_gammaneg_gtr_1,
        f4_gammaneg_less_1,
        f_RD,
        f_damp,
        gamma3,
        gamma2,
    )
    return f1, f2, f3, f4, f_RD, f_damp


@jax.jit
def get_coeffs(theta: Array) -> Array:
    # Retrives the coefficients needed to produce the waveform

    m1, m2, chi1, chi2 = theta[:4]
    m1_s = m1 * gt
    m2_s = m2 * gt
    M_s = m1_s + m2_s
    eta = m1_s * m2_s / (M_s**2.0)

    # Definition of chiPN from lalsuite
    chi_s = (chi1 + chi2) / 2.0
    chi_a = (chi1 - chi2) / 2.0
    seta = (1 - 4 * eta) ** (1 / 2)
    chiPN = chi_s * (1 - 76 * eta / 113) + seta * chi_a

    coeff = (
        PhenomD_coeff_table[:, 0]
        + PhenomD_coeff_table[:, 1] * eta
        + (chiPN - 1.0)
        * (
            PhenomD_coeff_table[:, 2]
            + PhenomD_coeff_table[:, 3] * eta
            + PhenomD_coeff_table[:, 4] * (eta**2.0)
        )
        + (chiPN - 1.0) ** 2.0
        * (
            PhenomD_coeff_table[:, 5]
            + PhenomD_coeff_table[:, 6] * eta
            + PhenomD_coeff_table[:, 7] * (eta**2.0)
        )
        + (chiPN - 1.0) ** 3.0
        * (
            PhenomD_coeff_table[:, 8]
            + PhenomD_coeff_table[:, 9] * eta
            + PhenomD_coeff_table[:, 10] * (eta**2.0)
        )
    )

    # FIXME: Change to dictionary lookup
    return coeff


def get_delta0(f1, f2, f3, v1, v2, v3, d1, d3):
    return (
        -(d3 * f1**2 * (f1 - f2) ** 2 * f2 * (f1 - f3) * (f2 - f3) * f3)
        + d1 * f1 * (f1 - f2) * f2 * (f1 - f3) * (f2 - f3) ** 2 * f3**2
        + f3**2
        * (
            f2
            * (f2 - f3) ** 2
            * (-4 * f1**2 + 3 * f1 * f2 + 2 * f1 * f3 - f2 * f3)
            * v1
            + f1**2 * (f1 - f3) ** 3 * v2
        )
        + f1**2
        * (f1 - f2) ** 2
        * f2
        * (f1 * f2 - 2 * f1 * f3 - 3 * f2 * f3 + 4 * f3**2)
        * v3
    ) / ((f1 - f2) ** 2 * (f1 - f3) ** 3 * (f2 - f3) ** 2)


def get_delta1(f1, f2, f3, v1, v2, v3, d1, d3):
    return (
        d3 * f1 * (f1 - f3) * (f2 - f3) * (2 * f2 * f3 + f1 * (f2 + f3))
        - (
            f3
            * (
                d1
                * (f1 - f2)
                * (f1 - f3)
                * (f2 - f3) ** 2
                * (2 * f1 * f2 + (f1 + f2) * f3)
                + 2
                * f1
                * (
                    f3**4 * (v1 - v2)
                    + 3 * f2**4 * (v1 - v3)
                    + f1**4 * (v2 - v3)
                    + 4 * f2**3 * f3 * (-v1 + v3)
                    + 2 * f1**3 * f3 * (-v2 + v3)
                    + f1
                    * (
                        2 * f3**3 * (-v1 + v2)
                        + 6 * f2**2 * f3 * (v1 - v3)
                        + 4 * f2**3 * (-v1 + v3)
                    )
                )
            )
        )
        / (f1 - f2) ** 2
    ) / ((f1 - f3) ** 3 * (f2 - f3) ** 2)


def get_delta2(f1, f2, f3, v1, v2, v3, d1, d3):
    return (
        d1
        * (f1 - f2)
        * (f1 - f3)
        * (f2 - f3) ** 2
        * (f1 * f2 + 2 * (f1 + f2) * f3 + f3**2)
        - d3
        * (f1 - f2) ** 2
        * (f1 - f3)
        * (f2 - f3)
        * (f1**2 + f2 * f3 + 2 * f1 * (f2 + f3))
        - 4 * f1**2 * f2**3 * v1
        + 3 * f1 * f2**4 * v1
        - 4 * f1 * f2**3 * f3 * v1
        + 3 * f2**4 * f3 * v1
        + 12 * f1**2 * f2 * f3**2 * v1
        - 4 * f2**3 * f3**2 * v1
        - 8 * f1**2 * f3**3 * v1
        + f1 * f3**4 * v1
        + f3**5 * v1
        + f1**5 * v2
        + f1**4 * f3 * v2
        - 8 * f1**3 * f3**2 * v2
        + 8 * f1**2 * f3**3 * v2
        - f1 * f3**4 * v2
        - f3**5 * v2
        - (f1 - f2) ** 2
        * (
            f1**3
            + f2 * (3 * f2 - 4 * f3) * f3
            + f1**2 * (2 * f2 + f3)
            + f1 * (3 * f2 - 4 * f3) * (f2 + 2 * f3)
        )
        * v3
    ) / ((f1 - f2) ** 2 * (f1 - f3) ** 3 * (f2 - f3) ** 2)


def get_delta3(f1, f2, f3, v1, v2, v3, d1, d3):
    return (
        (d3 * (f1 - f3) * (2 * f1 + f2 + f3)) / (f2 - f3)
        - (d1 * (f1 - f3) * (f1 + f2 + 2 * f3)) / (f1 - f2)
        + (
            2
            * (
                f3**4 * (-v1 + v2)
                + 2 * f1**2 * (f2 - f3) ** 2 * (v1 - v3)
                + 2 * f2**2 * f3**2 * (v1 - v3)
                + 2 * f1**3 * f3 * (v2 - v3)
                + f2**4 * (-v1 + v3)
                + f1**4 * (-v2 + v3)
                + 2
                * f1
                * f3
                * (f3**2 * (v1 - v2) + f2**2 * (v1 - v3) + 2 * f2 * f3 * (-v1 + v3))
            )
        )
        / ((f1 - f2) ** 2 * (f2 - f3) ** 2)
    ) / (f1 - f3) ** 3


def get_delta4(f1, f2, f3, v1, v2, v3, d1, d3):
    return (
        -(d3 * (f1 - f2) ** 2 * (f1 - f3) * (f2 - f3))
        + d1 * (f1 - f2) * (f1 - f3) * (f2 - f3) ** 2
        - 3 * f1 * f2**2 * v1
        + 2 * f2**3 * v1
        + 6 * f1 * f2 * f3 * v1
        - 3 * f2**2 * f3 * v1
        - 3 * f1 * f3**2 * v1
        + f3**3 * v1
        + f1**3 * v2
        - 3 * f1**2 * f3 * v2
        + 3 * f1 * f3**2 * v2
        - f3**3 * v2
        - (f1 - f2) ** 2 * (f1 + 2 * f2 - 3 * f3) * v3
    ) / ((f1 - f2) ** 2 * (f1 - f3) ** 3 * (f2 - f3) ** 2)


PhenomD_coeff_table = jnp.array(
    [
        [ 3.93196335e+03, 
         -1.73953755e+04,  
         3.13237752e+03,
         3.43945831e+05, 
         -1.21633876e+06, 
         -7.07042161e+04,
         1.38365311e+06, 
         -3.96661654e+06, 
         -6.00131873e+04,
         8.03647164e+05, 
         -2.09149025e+06],
       [-4.01037471e+04,  
        1.12257195e+05,  
        2.35617192e+04,
        -3.47684409e+06,  
        1.13735537e+07,  
        7.54169457e+05,
        -1.30861194e+07,  
        3.64477296e+07,  
        5.96276586e+05,
        -7.42780196e+06,  
        1.89283144e+07],
       [8.32102615e+04,
         -1.91234553e+05, 
         -2.10916033e+05,
         8.71665866e+06, 
         -2.69191351e+07, 
         -1.98915578e+06,
         3.08927021e+07, 
         -8.38903535e+07, 
         -1.45352427e+06,
         1.70595898e+07, 
         -4.27562198e+07],
       [8.15025488e-01,  
        2.57487523e+00,  
        1.16087834e+00,
        -2.36293575e+00,  
        6.77069524e+00,  
        7.57183766e-01,
        -2.72533320e+00,  
        7.11466346e+00,  
        1.76683409e-01,
        -7.97921212e-01,  
        2.11614600e+00],
       [6.92689744e-03,  
        3.02026514e-02,  
        6.30841961e-03,
        -1.20711186e-01,  
        2.62747025e-01,  
        3.41502408e-03,
        -1.07824902e-01,  
        2.70946314e-01,  
        7.37429216e-04,
        -2.74931385e-02,  
        7.33198712e-02],
       [1.01024075e+00,  
        8.99312182e-04,  
        2.83954973e-01,
        -4.04949255e+00,  
        1.32084435e+01,  
        1.03961879e-01,
        -7.02595094e+00,  
        2.47824422e+01,  
        3.09321380e-02,
        -2.69221741e+00,  
        9.60989622e+00],
       [1.30836162e+00, 
        -5.53772890e-03, 
        -6.78296719e-02,
        -6.68993862e-01,  
        3.40308803e+00, 
        -5.29653792e-02,
        -9.92349382e-01,  
        4.82083957e+00, 
        -6.13414778e-03,
        -3.84299295e-01,  
        1.75614356e+00],
       [2.09655200e+03,  
        1.46374932e+03,  
        1.31254933e+03,
         1.83073300e+04, 
         -4.35341441e+04, 
         -8.33288954e+02,
         3.20473200e+04, 
         -1.08609450e+05,  
         4.52251364e+02,
         8.35343955e+03, 
         -4.45313250e+04],
       [-1.00959555e+04, 
        -4.46305706e+04, 
        -6.54384004e+03,
        -2.66712643e+05,  
        6.86435689e+05,  
        3.40627893e+03,
        -4.37838301e+05,  
        1.63272580e+06, 
        -7.46852402e+03,
        -1.14538837e+05,  
        6.74956494e+05],
       [2.29809416e+04,  
        2.30975807e+05,  
        1.49540488e+04,
         1.19604525e+06, 
         -3.10367025e+06, 
         -3.03788868e+03,
         1.87074838e+06, 
         -7.29452489e+06,  
         4.26352892e+04,
         4.67702732e+05, 
         -3.06091914e+06],
       [-1.46143957e+04, 
        -3.77788185e+05, 
        -9.60983023e+03,
        -1.70963500e+06,  
        4.33297088e+06, 
        -2.23606106e+04,
        -2.50177217e+06,  
        1.02890566e+07, 
        -8.55234594e+04,
        -5.70007844e+05,  
        4.39862205e+06],
       [9.78974733e+01, 
        -4.26597309e+01,  
        1.53484210e+02,
        -1.41706208e+03,  
        2.75286141e+03,  
        1.38740647e+02,
        -1.43365851e+03,  
        2.85774190e+03,  
        4.10251095e+01,
        -4.23680738e+02,  
        8.50359434e+02],
       [-3.28191397e+00, 
        -9.03607614e+00, 
        -1.24157840e+01,
         5.52992333e+01, 
         -1.06163497e+02, 
         -1.19553142e+01,
         7.68442395e+01, 
         -1.55453536e+02, 
         -3.41080809e+00,
         2.55962299e+01, 
         -5.43626214e+01],
       [-2.52209388e-05,  
        1.97560883e-05, 
        -1.83591207e-05,
         2.18834684e-05,  
         8.24975211e-05,  
         7.15569509e-06,
        -5.57852426e-05,  
        1.91360910e-04,  
        5.44968862e-06,
        -3.21951563e-05,  
        7.97618318e-05],
       [4.33151471e+01,  
        6.38633268e+02, 
        -3.28576875e+01,
         2.41589383e+03, 
         -5.76687517e+03, 
         -6.18545931e+01,
         2.95396776e+03, 
         -8.98629058e+03, 
         -2.15714358e+01,
         9.81215822e+02, 
         -3.23956649e+03],
       [-7.01643856e-02, 
        -1.62598965e-01, 
        -1.87353693e-01,
         1.13636663e+00, 
         -2.83560154e+00, 
         -1.71472015e-01,
         1.72024002e+00, 
         -4.54015868e+00, 
         -4.99516195e-02,
         6.06604193e-01, 
         -1.68213862e+00],
       [9.59999065e+00, 
        -3.96332715e+02,  
        1.62008875e+01,
        -1.57864861e+03,  
        3.59661283e+03,  
        2.70931657e+01,
        -1.78533483e+03,  
        5.15272607e+03,  
        1.11761773e+01,
        -5.77620435e+02,  
        1.80937814e+03],
       [-2.98963731e-02,  
        1.40103346e+00, 
        -7.35570933e-02,
         8.33841740e-01,  
         2.24002745e-01, 
         -5.52034193e-02,
         5.66702121e-01,  
         7.18693339e-01, 
         -1.55075292e-02,
         1.57501674e-01,  
         2.10767029e-01],
       [9.98646435e-01, 
        -7.88442951e-03, 
        -5.90477383e-02,
         1.39575353e+00, 
         -4.51685607e+00, 
         -5.58535106e-02,
         1.75160596e+00, 
         -5.99050811e+00, 
         -1.79452757e-02,
         5.96531849e-01, 
         -2.06080473e+00]
         ]
)
